#include <stdio.h>
#define MAX 10
// Function prototype for the topological sort function
void fnTopological(int a[MAX][MAX], int n);
int main(void) {
 int n = 6; // Number of vertices
 // Predefined adjacency matrix for the graph
 int a[MAX][MAX] = {
 {0, 1, 1, 0, 0, 0},
 {0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0}
 };
 printf("Topological Sorting Algorithm -\n");
 // Call the topological sorting function
 fnTopological(a, n);
 printf("\n");
 return 0;
}
void fnTopological(int a[MAX][MAX], int n) {
 int in[MAX] = {0}; 
 int out[MAX]; 
 int stack[MAX]; 
 int top = -1; 
 int i, j, k = 0; // Loop counters
 // Step 1: Calculate in-degree of each vertex
 for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
 if (a[j][i] == 1) { 
 in[i]++; // Increment in-degree of vertex i
 }
 }
 }
 // Step 2: Perform topological sorting
 while (1) {
 // Find all vertices with in-degree zero
 for (i = 0; i < n; i++) {
 if (in[i] == 0) { 
 stack[++top] = i; 
 in[i] = -1; 
 }
 }
 if (top == -1) // Check if the stack is empty
 break;
 out[k] = stack[top--]; 
topological order
 for (i = 0; i < n; i++) {
 if (a[out[k]][i] == 1) { /
 in[i]--; 
 }
 }
 k++; 
 }
 
 printf("Topological Sorting (JOB SEQUENCE) is:- \n");
 for (i = 0; i < k; i++)
 printf("%d ", out[i]);
 printf("\n");
}
